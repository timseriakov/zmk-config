/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <250>;
    tapping-term-ms = <250>;
};

&lt { quick-tap-ms = <200>; };

&soft_off { hold-time-ms = <200>; };

/ {
    macros {
        mcr_arr_fn: macro_arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE &kp LEFT_BRACE &kp RET>;
            label = "MACRO_ARROW_FN";
        };

        mcr_test: mcr_test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp N1 &kp LS(Q) &kp A &kp Z &kp N2 &kp LS(W) &kp S &kp X &kp ENTER>;
            label = "MCR_TEST";
        };

        mcr_comma_space_cyr: mcr_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
            label = "MCR_COMMA_SPACE";
        };

        mcr_dot_space_cyr: mcr_dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AMPERSAND &kp SPACE &skl LEFT_SHIFT>;
            label = "MCR_DOT_SPACE";
        };

        mcr_new_line_down: mcr_new_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT_ARROW) &kp LS(ENTER)>;
            label = "MCR_NEW_LINE";
        };

        mcr_next_word: mcr_next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp RIGHT_ARROW>;
            label = "MCR_NEXT_WORD";
        };

        mcr_vim_D: mcr_vim_D {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp BACKSPACE>;

            label = "MCR_VIM_D";
        };

        mcr_vim_Y: mcr_vim_Y {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(C) &kp RIGHT_ARROW>;

            label = "MCR_VIM_Y";
        };

        mcr_vim_dd: mcr_vim_dd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LG(LEFT_ARROW)>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp BACKSPACE>;

            label = "MCR_VIM_DD";
        };

        mcr_vim_yy: mcr_vim_yy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LG(LEFT_ARROW)>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(C) &kp LEFT_ARROW>;

            label = "MCR_VIM_YY";
        };

        mcr_esc: mcr_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &to 0 &mcr_scroll_off>;
            label = "MCR_ESC";
        };

        mcr_paste_app: mcr_paste_app {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(V)) &to 8>;
            label = "MCR_PASTE_APP";
        };

        mcr_enter: macro_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &to 0>;
            label = "MACRO_ENTER";
        };

        mcr_f1: mcr_f1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F1>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F1";
        };

        mcr_f2: mcr_f2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F2>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F2";
        };

        mcr_f3: mcr_f3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F3>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F3";
        };

        mcr_f4: mcr_f4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F4>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F4";
        };

        mcr_f5: mcr_f5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F5>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F5";
        };

        mcr_f6: mcr_f6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F6>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F6";
        };

        mcr_f7: mcr_f7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F7>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F7";
        };

        mcr_f8: mcr_f8 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F8>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F8";
        };

        mcr_f9: mcr_f9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F9>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F9";
        };

        mcr_f10: mcr_f10 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F10>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F10";
        };

        mcr_f11: mcr_f11 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F11>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F11";
        };

        mcr_f12: mcr_f12 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F12>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F12";
        };

        mcr_flash_firmware: mcr_flash_firmware {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(SLASH))) &bootloader>;
            label = "MCR_FLASH_FIRMWARE";
        };

        mcr_horizontal_scroll: mcr_horizontal_scroll {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &mkp MB5>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LSHFT &mkp MB5>;

            label = "MCR_HORIZONTAL_SCROLL";
        };

        mcr_mkp_mb1: mcr_mkp_mb1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 10>, <&mkp MB1>;

            label = "MCR_MKP_MB1";
        };

        mcr_scroll_on: mcr_tog_scroll {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&to 11>,
                <&macro_press>,
                <&mkp MB5>,
                <&macro_tap>,
                <&kp LC(LA(Q))>;

            label = "MCR_TOG_SCROLL";
        };

        mcr_scroll_off: mcr_scroll_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release>, <&mkp MB5>, <&macro_tap>, <&to 0>;

            label = "MCR_SCROLL_OFF";
        };

        mcr_test2: mcr_test2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp LS(Q) &kp A &kp Z &kp N2 &kp LS(W) &kp S &kp X &kp EXCLAMATION &kp EXCL &kp ENTER>;
            label = "MCR_TEST2";
        };

        mcr_format_code: mcr_format_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &kp LG(Z) &kp SPACE &kp F &kp LG(S)>;
            label = "MCR_FORMAT_CODE";
        };

        mcr_esc_shift: mcr_esc_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(ESC) &to 0 &mcr_scroll_off>;
            label = "MCR_ESC_SHIFT";
        };

        mcr_f3_ctrl: mcr_f3_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24 &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp F3>,
                <&macro_release>,
                <&kp F24 &kp LEFT_CONTROL>;

            label = "MCR_F3_CTRL";
        };

        mcr_f4_ctrl: mcr_f4_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24 &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp F4>,
                <&macro_release>,
                <&kp F24 &kp LEFT_CONTROL>;

            label = "MCR_F4_CTRL";
        };

        mcr_f5_ctrl: mcr_f5_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24 &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp F5>,
                <&macro_release>,
                <&kp F24 &kp LEFT_CONTROL>;

            label = "MCR_F5_CTRL";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_df_esc {
            bindings = <&mcr_esc>;
            key-positions = <15 16>;
            layers = <0 8 5 11>;
            timeout-ms = <35>;
        };

        combo_sd_ctrl_a {
            bindings = <&kp LC(A)>;
            key-positions = <14 15>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_fg_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            layers = <0 5 8 1>;
            timeout-ms = <35>;
        };

        combo_vb_enter {
            bindings = <&kp ENTER>;
            key-positions = <28 29>;
            layers = <0 1 8 5>;
            timeout-ms = <35>;
        };

        combo_cv_enter {
            bindings = <&kp ENTER>;
            key-positions = <28 27>;
            layers = <0 1 8 5>;
            timeout-ms = <35>;
        };

        combo_jk_esc {
            bindings = <&mcr_esc>;
            key-positions = <19 20>;
            layers = <0 1 5 8>;
            timeout-ms = <35>;
        };

        combo_io_slash {
            bindings = <&kp SLASH>;
            key-positions = <8 9>;
            timeout-ms = <40>;
        };

        combo_kl_equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 21>;
            timeout-ms = <35>;
        };

        combo_lt_gt_underscore {
            bindings = <&kp UNDER>;
            key-positions = <32 33>;
            timeout-ms = <35>;
        };

        combo_b_t1_raycast {
            bindings = <&kp LG(SPACE)>;
            key-positions = <29 38>;
        };

        combo_v_t3_switch_lang {
            bindings = <&kp F24>;
            key-positions = <36 28>;
        };

        combo_n_t1_homerow_app {
            bindings = <&kp LG(LS(J))>;
            key-positions = <30 39>;
        };

        combo_n_t2_homerow_app {
            bindings = <&kp LC(LG(SPACE))>;
            key-positions = <30 40>;
        };

        combo_hm_percent {
            bindings = <&kp PERCENT>;
            key-positions = <18 30>;
        };

        combo_jm_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <19 31>;
        };

        combo_k_comma_hash {
            bindings = <&kp HASH>;
            key-positions = <20 32>;
        };

        combo_tg_tilde {
            bindings = <&kp TILDE>;
            key-positions = <5 17>;
        };

        combo_uj_plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        combo_ik_minus {
            bindings = <&kp MINUS>;
            key-positions = <8 20>;
        };

        combo_ed_double_quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <3 15>;
            layers = <0 5 1 8>;
        };

        combo_yh_grave {
            bindings = <&kp GRAVE>;
            key-positions = <18 6>;
            layers = <0 5 1 8>;
        };

        combo_rf_quotes {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <16 4>;
            layers = <0 5 1 8>;
        };

        combo_t1_t1_caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <38 39>;
        };

        combo_v_t2_raycast_apps {
            bindings = <&kp LC(LG(N))>;
            key-positions = <37 29>;
        };

        combo_v_t3_switch_wrong_lang {
            bindings = <&kp LALT>;
            key-positions = <28 37>;
        };

        combo_toggle_game_layer {
            bindings = <&tog 7>;
            key-positions = <25 1>;
            timeout-ms = <100>;
        };

        combo_gb_paste {
            bindings = <&kp LG(V)>;
            key-positions = <17 29>;
            layers = <0 5 1 8>;
        };

        combo_fv_copy {
            bindings = <&kp LG(C)>;
            key-positions = <16 28>;
            layers = <0 5 1 8>;
        };

        combo_dc_cut {
            bindings = <&kp LG(X)>;
            key-positions = <15 27>;
            layers = <0 1 5 8>;
        };

        combo_sx_copy_line {
            bindings = <&mcr_vim_yy>;
            key-positions = <14 26>;
            layers = <0 1 5 8>;
        };

        combo_qa_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <13 1>;
            layers = <0 5 1 8>;
        };

        combo_az_cmd_ctrl_a {
            bindings = <&kp LG(LC(A))>;
            key-positions = <13 25>;
            layers = <0 1 5 8>;
        };

        combo_t2_z_bt_layer {
            bindings = <&lt 6 UNDER>;
            key-positions = <37 25>;
            timeout-ms = <75>;
        };

        combo_t2_slsh_bt_layer {
            bindings = <&lt 6 EXCL>;
            key-positions = <40 34>;
            timeout-ms = <75>;
        };

        combo_t2_a_media_func_layer {
            bindings = <&lt 9 LC(LG(N))>;
            key-positions = <37 13>;
        };

        combo_t2_semi_media_func_layer {
            bindings = <&lt 9 COLON>;
            key-positions = <40 22>;
            timeout-ms = <75>;
        };

        combo_hyper {
            bindings = <&kp LC(LA(LS(LGUI)))>;
            key-positions = <39 22>;
            timeout-ms = <75>;
            layers = <0 5>;
        };

        combo_meh {
            bindings = <&kp LA(LS(LCTRL))>;
            key-positions = <13 38>;
            timeout-ms = <75>;
            layers = <0 5>;
        };

        combo_q_t1_toggle_console {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <38 1>;
            layers = <0>;
            timeout-ms = <75>;
        };

        combo_p_t1_toggle_console {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <39 10>;
            layers = <0 7>;
            timeout-ms = <75>;
        };

        combo_z_t3_soft_off {
            bindings = <&soft_off>;
            key-positions = <25 36>;
            layers = <0>;
        };

        combo_c_t3_gpt_promt {
            bindings = <&kp LA(SPACE)>;
            key-positions = <36 27>;
        };

        combo_g_t1_paste_app {
            bindings = <&mcr_paste_app>;
            key-positions = <17 38>;
            layers = <0 8>;
        };

        combo_df_esc_shift {
            bindings = <&mcr_esc_shift>;
            key-positions = <15 16>;
            layers = <1>;
        };

        combo_we_scroll_on {
            bindings = <&mcr_scroll_on>;
            key-positions = <3 2>;
            timeout-ms = <40>;
        };

        combo_xc_switch_lang {
            bindings = <&kp F24>;
            key-positions = <26 27>;
            timeout-ms = <40>;
        };

        combo_t2_t2_lang_switch {
            bindings = <&kp F24>;
            key-positions = <37 40>;
            timeout-ms = <30>;
        };

        combo_ol_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <9 21>;
        };

        combo_ws_pipe {
            bindings = <&kp PIPE>;
            key-positions = <2 14>;
            layers = <0 5 1 8>;
        };
    };

    behaviors {
        td_next_prev_track: td_next_prev_track {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NEXT_PREV_TRACK";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp F9>, <&kp F7>;
        };

        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <225>;
            quick-tap-ms = <195>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        gr_vim_ggG: gr_vim_ggG {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_GGG";
            bindings = <&td_g_gg>, <&kp LG(DOWN_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_g_gg: td_g_gg {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_G_GG";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp LG(UP_ARROW)>;
        };

        td_vim_d_dd_D: td_vim_d_dd_D {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_VIM_D_DD_D";
            #binding-cells = <0>;
            bindings = <&gr_vim_d_D>, <&mcr_vim_dd>;
        };

        gr_vim_d_D: gr_vim_d_D {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_D_D";
            bindings = <&kp DELETE>, <&mcr_vim_D>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_vim_y_yy_Y: td_vim_y_yy_Y {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_VIM_Y_YY_Y";
            #binding-cells = <0>;
            bindings = <&gr_vim_y_Y>, <&mcr_vim_yy>;

            tapping-term-ms = <330>;
        };

        gr_vim_y_Y: gr_vim_y_Y {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_Y_Y";
            bindings = <&kp LG(C)>, <&mcr_vim_Y>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_vim_arwdown_pgdown: gr_vim_arwdown_pgdown {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_ARWDOWN_PGDOWN";
            bindings = <&kp DOWN_ARROW>, <&kp PAGE_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        gr_vim_arwup_pgup: gr_vim_arwup_pgup {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_ARWUP_PGUP";
            bindings = <&kp UP_ARROW>, <&kp PAGE_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        gr_vim_arwleft_linestart: gr_vim_arwleft_linestart {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_ARWLEFT_LINESTART";
            bindings = <&kp LEFT_ARROW>, <&kp LG(LEFT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        gr_vim_arwright_lineend: gr_vim_arwright_lineend {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_ARWRIGHT_LINEEND";
            bindings = <&kp RIGHT_ARROW>, <&kp LG(RIGHT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        skl: sticky_key_long_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_LONG_RELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            ignore-modifiers;
            quick-release;
        };

        td_star_hash: td_star_hash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_STAR_HASH";
            #binding-cells = <0>;
            bindings = <&kp ASTERISK>, <&kp HASH>;

            tapping-term-ms = <260>;
        };

        lt_like_hmr: lt_like_hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_LIKE_HMR";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <225>;
            quick-tap-ms = <195>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q         &kp W            &lt_like_hmr 10 E  &lt_like_hmr 4 R   &lt_like_hmr 2 T      &lt_like_hmr 2 Y  &kp U              &kp I            &kp O            &kp P                 &none
&none  &hrm LCTRL A  &hrm LEFT_ALT S  &hrm LEFT_GUI D    &hrm LEFT_SHIFT F  &lt_like_hmr 3 G      &kp H             &hrm LEFT_SHIFT J  &hrm LEFT_GUI K  &hrm LEFT_ALT L  &hrm LCTRL SEMICOLON  &none
&none  &kp Z         &kp X            &kp C              &kp V              &kp B                 &kp N             &kp M              &kp COMMA        &kp DOT          &kp QUESTION          &none
                                      &sk LEFT_GUI       &lt 1 SPACE        &mt LEFT_SHIFT TAB    &lt 5 BACKSPACE   &lt 1 ENTER        &mt LGUI DELETE
            >;
        };

        num_char_layer {
            bindings = <
&none   &kp MINUS   &kp N1  &kp N2  &kp N3              &kp SLASH        &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp AT_SIGN  &mcr_arr_fn      &none
&trans  &kp PERIOD  &kp N4  &kp N5  &kp N6              &kp N0           &kp CARET      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR   &kp EXCLAMATION  &trans
&none   &kp EQUAL   &kp N7  &kp N8  &kp N9              &td_star_hash    &kp COLON      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PERCENT  &kp QUESTION     &none
                            &trans  &mcr_dot_space_cyr  &trans           &trans         &mcr_comma_space_cyr  &trans
            >;
        };

        hotkeys_layer_1 {
            bindings = <
&trans  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)     &kp LG(N4)     &kp LG(N5)           &kp LG(N6)  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(N0)  &trans
&trans  &trans      &trans      &trans         &kp LG(LS(K))  &kp LG(K)            &trans      &trans      &trans      &trans      &trans      &trans
&trans  &trans      &trans      &trans         &trans         &trans               &trans      &trans      &trans      &trans      &trans      &trans
                                &kp LC(EQUAL)  &kp LG(LC(A))  &kp LC(BACKSLASH)    &trans      &trans      &trans
            >;
        };

        hotkeys_layer_2 {
            bindings = <
&trans  &trans     &trans          &trans          &trans          &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(A)  &kp LG(LS(N1))  &kp LG(LS(N4))  &kp LG(LS(N2))  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans          &kp LG(LA(D))   &kp LG(LS(N5))  &mcr_paste_app    &trans  &trans  &trans  &trans  &trans  &trans
                                   &trans          &mcr_paste_app  &trans            &trans  &trans  &trans
            >;
        };

        ide_layer {
            bindings = <
&trans  &kp LS(LA(LG(E)))  &kp LS(LG(O))  &kp LS(LG(F))      &trans     &trans              &trans  &kp LG(N7)  &trans  &trans  &trans  &trans
&trans  &trans             &trans         &kp LG(LS(LA(O)))  &kp LG(E)  &trans              &trans  &trans      &trans  &none   &trans  &trans
&trans  &trans             &trans         &trans             &trans     &trans              &trans  &trans      &trans  &trans  &trans  &trans
                                          &kp LG(N9)         &kp LG(P)  &mcr_format_code    &trans  &trans      &trans
            >;
        };

        vim_layer {
            bindings = <
&none  &none             &mcr_next_word  &kp LA(RIGHT_ARROW)  &none           &none           &td_vim_y_yy_Y             &kp LG(Z)               &to 0               &mcr_new_line_down        &kp LG(V)  &none
&none  &kp LEFT_CONTROL  &kp LG(F)       &td_vim_d_dd_D       &none           &gr_vim_ggG     &gr_vim_arwleft_linestart  &gr_vim_arwdown_pgdown  &gr_vim_arwup_pgup  &gr_vim_arwright_lineend  &kp LCTRL  &none
&none  &kp LEFT_SHIFT    &kp BACKSPACE   &kp LG(X)            &kt LEFT_SHIFT  &kp LA(LEFT)    &none                      &kp LG(X)               &none               &none                     &kp LG(F)  &none
                                         &trans               &trans          &trans          &trans                     &trans                  &trans
            >;
        };

        bt_layer {
            bindings = <
&none  &bt BT_CLR_ALL  &bt BT_DISC 4  &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1          &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &bt BT_CLR_ALL  &none
&none  &sys_reset      &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1           &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &sys_reset      &none
&none  &none           &bt BT_PRV     &bt BT_CLR     &bt BT_NXT     &mcr_flash_firmware    &bootloader    &bt BT_PRV     &bt BT_CLR     &bt BT_NXT     &none           &none
                                      &mcr_test      &trans         &trans                 &trans         &trans         &mcr_test2
            >;
        };

        game_layer {
            bindings = <
&trans  &kp Q  &kp W  &kp E    &kp R      &kp T        &kp TILDE       &trans          &trans        &trans           &kp ESC  &trans
&trans  &kp A  &kp S  &kp D    &kp F      &kp G        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans   &trans
&trans  &kp Z  &kp X  &kp C    &kp V      &kp B        &trans          &trans          &trans        &trans           &trans   &trans
                      &kp TAB  &kp LSHFT  &kp SPACE    &trans          &trans          &trans
            >;
        };

        paste_app_layer {
            bindings = <
&trans  &to 0  &to 0  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &to 0         &to 0       &to 0  &to 0  &to 0  &to 0  &trans
&trans  &to 0  &to 0  &kp LEFT              &kp RIGHT              &to 0         &to 0       &to 0  &to 0  &to 0  &to 0  &trans
&trans  &to 0  &to 0  &to 0                 &to 0                  &to 0         &to 0       &to 0  &to 0  &to 0  &to 0  &trans
                      &to 0                 &mcr_enter             &mcr_enter    &mcr_enter  &to 0  &to 0
            >;
        };

        media_func_layer {
            bindings = <
&none  &none  &kp F10  &kp F11  &kp F12              &none     &mcr_f9       &mcr_f10  &mcr_f11  &mcr_f12      &none  &none
&none  &none  &kp F5   &kp F8   &td_next_prev_track  &kp F3    &mcr_f5_ctrl  &mcr_f6   &mcr_f7   &mcr_f8       &none  &none
&none  &none  &kp F24  &kp F1   &kp F2               &none     &mcr_f1       &mcr_f2   &mcr_f3   &mcr_f4_ctrl  &none  &none
                       &trans   &trans               &trans    &trans        &trans    &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &kp LG(LC(J))  &none           &kp LG(LC(K))  &mcr_f3_ctrl    &trans  &trans   &trans       &trans  &trans  &trans
&trans  &trans  &kp LG(LEFT)   &mcr_scroll_on  &kp LG(RIGHT)  &trans          &trans  &kp TAB  &kp LS(TAB)  &trans  &trans  &trans
&trans  &trans  &trans         &trans          &trans         &trans          &trans  &trans   &trans       &trans  &trans  &trans
                               &kp LC(F3)      &mcr_f4_ctrl   &mcr_f5_ctrl    &trans  &trans   &trans
            >;
        };

        nav_scroll_layer {
            bindings = <
&trans  &mcr_scroll_off   &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off    &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &trans
&trans  &kp LEFT_CONTROL  &kp LEFT_ALT     &kp LGUI         &kp LEFT_SHIFT   &mcr_scroll_off    &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &trans
&trans  &mcr_scroll_off   &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off    &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off  &trans
                                           &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off    &mcr_scroll_off  &mcr_scroll_off  &mcr_scroll_off
            >;
        };
    };
};
