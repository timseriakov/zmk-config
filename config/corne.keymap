/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

&lt { quick-tap-ms = <200>; };

/ {
    macros {
        mcr_arr_fn: macro_arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE &kp LEFT_BRACE &kp RET>;
            label = "MACRO_ARROW_FN";
        };

        mcr_dbl_shft: mcr_dbl_shft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LEFT_SHIFT &kp LEFT_SHIFT>;

            label = "MCR_DBL_SHFT";
        };

        mcr_tap_shft: mcr_tap_shft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LEFT_SHIFT>;

            label = "MCR_TAP_SHFT";
        };

        mcr_test: mcr_test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp LS(Q) &kp A &kp Z &kp N2 &kp LS(W) &kp S &kp X &kp ENTER>;
            label = "MCR_TEST";
        };

        mcr_comma_space: mcr_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MCR_COMMA_SPACE";
        };

        mcr_dot_space: mcr_dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &skl LEFT_SHIFT>;
            label = "MCR_DOT_SPACE";
        };

        mcr_new_line_down: mcr_new_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT_ARROW) &kp LS(ENTER)>;
            label = "MCR_NEW_LINE";
        };

        mcr_next_word: mcr_next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp RIGHT_ARROW>;
            label = "MCR_NEXT_WORD";
        };

        mcr_vim_D: mcr_vim_D {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp BACKSPACE>;

            label = "MCR_VIM_D";
        };

        mcr_vim_Y: mcr_vim_Y {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(C) &kp RIGHT_ARROW>;

            label = "MCR_VIM_Y";
        };

        mcr_vim_dd: mcr_vim_dd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LG(LEFT_ARROW)>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp BACKSPACE>;

            label = "MCR_VIM_DD";
        };

        mcr_vim_yy: mcr_vim_yy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LG(LEFT_ARROW)>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LG(C) &kp LEFT_ARROW>;

            label = "MCR_VIM_YY";
        };

        mcr_esc: mcr_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &to 0>;
            label = "MCR_ESC";
        };

        mcr_paste_app: mcr_paste_app {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(V)) &to 6>;
            label = "MCR_PASTE_APP";
        };

        mcr_enter: macro_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &to 0>;
            label = "MACRO_ENTER";
        };

        mcr_paste_1: macro_paste_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N1) &to 0>;
            label = "MACRO_PASTE_1";
        };

        mcr_paste_2: macro_paste_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N2) &to 0>;
            label = "MACRO_PASTE_2";
        };

        mcr_paste_3: macro_paste_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N3) &to 0>;
            label = "MACRO_PASTE_3";
        };

        mcr_paste_4: macro_paste_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N4) &to 0>;
            label = "MACRO_PASTE_4";
        };

        mcr_paste_5: macro_paste_5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N5) &to 0>;
            label = "MACRO_PASTE_5";
        };

        mcr_f1: mcr_f1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F1>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F1";
        };

        mcr_f2: mcr_f2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F2>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F2";
        };

        mcr_f3: mcr_f3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F3>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F3";
        };

        mcr_f4: mcr_f4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F4>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F4";
        };

        mcr_f5: mcr_f5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F5>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F5";
        };

        mcr_f6: mcr_f6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F6>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F6";
        };

        mcr_f7: mcr_f7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F7>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F7";
        };

        mcr_f8: mcr_f8 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F8>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F8";
        };

        mcr_f9: mcr_f9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F9>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F9";
        };

        mcr_f10: mcr_f10 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F10>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F10";
        };

        mcr_f11: mcr_f11 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F11>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F11";
        };

        mcr_f12: mcr_f12 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F12>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F12";
        };

        mcr_flash_firmware: mcr_flash_firmware {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(SLASH))) &bootloader>;
            label = "MCR_FLASH_FIRMWARE";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_df_esc {
            bindings = <&mcr_esc>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_jk_esc {
            bindings = <&mcr_esc>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        combo_yu_play_pause {
            bindings = <&td_ply>;
            key-positions = <6 7>;
            timeout-ms = <75>;
        };

        combo_hj_enter {
            bindings = <&kp RETURN>;
            key-positions = <18 19>;
            timeout-ms = <75>;
        };

        combo_fg_tab {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
            timeout-ms = <75>;
            layers = <0 2>;
        };

        combo_ui_volume_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <7 8>;
        };

        combo_io_minus {
            bindings = <&kp MINUS>;
            key-positions = <8 9>;
        };

        combo_we_brightness_down {
            bindings = <&kp F1>;
            key-positions = <2 3>;
            layers = <0>;
            timeout-ms = <30>;
        };

        combo_er_brightness_up {
            bindings = <&kp F2>;
            key-positions = <3 4>;
            layers = <0>;
            timeout-ms = <30>;
        };

        combo_b_t1_raycast {
            bindings = <&kp LG(SPACE)>;
            key-positions = <29 38>;
        };

        combo_b_t2_raycast_apps {
            bindings = <&kp LG(LC(N))>;
            key-positions = <29 37>;
        };

        combo_n_t2_homerow_app {
            bindings = <&kp LG(LS(J))>;
            key-positions = <30 40>;
        };

        combo_n_t1_homerow_app {
            bindings = <&kp LC(LG(SPACE))>;
            key-positions = <30 39>;
        };

        combo_jm_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <19 31>;
        };

        combo_k_comma_hash {
            bindings = <&kp HASH>;
            key-positions = <20 32>;
        };

        combo_hm_percent {
            bindings = <&kp PERCENT>;
            key-positions = <18 30>;
        };

        combo_uj_brackets_round {
            bindings = <&td_bks_round>;
            key-positions = <7 19>;
            timeout-ms = <75>;
        };

        combo_ik_brackets_square {
            bindings = <&td_bks_square>;
            key-positions = <8 20>;
            timeout-ms = <75>;
        };

        combo_tg_quotes {
            bindings = <&td_quote_dquote>;
            key-positions = <5 17>;
            timeout-ms = <75>;
        };

        combo_nm_backspace {
            bindings = <&kp DELETE>;
            key-positions = <30 31>;
            timeout-ms = <75>;
        };

        combo_vb_delete {
            bindings = <&kp BACKSPACE>;
            key-positions = <28 29>;
            timeout-ms = <75>;
        };

        combo_kl_equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 21>;
            timeout-ms = <75>;
        };

        combo_lt_gt_underscore {
            bindings = <&kp UNDER>;
            key-positions = <32 33>;
            timeout-ms = <75>;
        };

        combo_yh_brackets_curly {
            bindings = <&td_bks_curly>;
            key-positions = <6 18>;
            timeout-ms = <75>;
        };

        combo_t1_t1_dot_space {
            bindings = <&mcr_dot_space>;
            key-positions = <38 39>;
            timeout-ms = <75>;
        };

        combo_rf_lt_gt {
            bindings = <&td_LT_GT>;
            key-positions = <4 16>;
            timeout-ms = <75>;
            layers = <0 2>;
        };

        combo_sd_ctrl_a {
            bindings = <&kp LC(A)>;
            key-positions = <14 15>;
            layers = <0>;
        };

        combo_t2_m_toggle_vim_layer {
            bindings = <&tog 2>;
            key-positions = <31 40>;
            timeout-ms = <75>;
        };

        combo_v_t2_switch_lang {
            bindings = <&kp CAPS>;
            key-positions = <28 37>;
            timeout-ms = <75>;
        };

        combo_v_t2_fix_lang {
            bindings = <&kp LALT>;
            key-positions = <28 36>;
        };

        combo_toggle_game_layer {
            bindings = <&tog 5>;
            key-positions = <36 37 38>;
            timeout-ms = <100>;
        };

        combo_df_enter_num_layer {
            bindings = <&kp ENTER>;
            key-positions = <15 16>;
            layers = <1>;
            timeout-ms = <75>;
        };

        combo_ed_pipe {
            bindings = <&kp BACKSLASH>;
            key-positions = <15 3>;
            timeout-ms = <75>;
        };

        combo_f_t1_toggle_console {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <38 17>;
            layers = <0 2>;
        };

        combo_j_t1_toggle_console {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <39 18>;
            layers = <0 2>;
        };

        combo_t2_z_bt_layer {
            bindings = <&lt 4 UNDER>;
            key-positions = <37 25>;
        };

        combo_t2_slsh_bt_layer {
            bindings = <&lt 4 UNDER>;
            key-positions = <40 34>;
        };

        combo_t2_a_media_func_layer {
            bindings = <&lt 7 COLON>;
            key-positions = <37 13>;
        };

        combo_t2_semi_media_func_layer {
            bindings = <&lt 7 COLON>;
            key-positions = <40 22>;
        };

        combo_t3_slsh_excl {
            bindings = <&kp EXCL>;
            key-positions = <41 34>;
        };

        combo_fv_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <16 28>;
            timeout-ms = <75>;
        };

        combo_dc_hash {
            bindings = <&kp HASH>;
            key-positions = <15 27>;
        };

        combo_gb_percent {
            bindings = <&kp PERCENT>;
            key-positions = <17 29>;
        };

        combo_hyper {
            bindings = <&kp LC(LA(LS(LGUI)))>;
            key-positions = <39 22>;
        };

        combo_meh {
            bindings = <&kp LA(LS(LCTRL))>;
            key-positions = <13 38>;
        };
    };

    behaviors {
        td_ply: td_ply {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLY";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp F8>, <&kp F9>, <&kp F7>;
        };

        td_slshs: td_slashes {
            compatible = "zmk,behavior-tap-dance";
            label = "td_slashes";
            #binding-cells = <0>;
            tapping-term-ms = <270>;
            bindings = <&kp FSLH>, <&kp BACKSLASH>;
        };

        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td_bks_round: td_bks_round {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BKS_ROUND";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&gr_bks_round>, <&kp RIGHT_PARENTHESIS>;
        };

        td_bks_square: td_bks_square {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BKS_SQUARE";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        td_bks_curly: td_bks_curly {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BKS_CURLY";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&gr_bks_curly>, <&kp RIGHT_BRACE>;
        };

        gr_bks_round: gr_bks_round {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_BKS_ROUND";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_bks_curly: gr_bks_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_BKS_CURLY";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_boot_reset: gr_boot_reset {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_BOOT_RESET";
            bindings = <&bootloader>, <&sys_reset>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_vim_ggG: gr_vim_ggG {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_GGG";
            bindings = <&td_g_gg>, <&kp LG(DOWN_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_g_gg: td_g_gg {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_G_GG";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp LG(UP_ARROW)>;
        };

        td_LT_GT: td_LT_GT {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LT_GT";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&gr_LT_GT>, <&kp GT>;
        };

        gr_LT_GT: gr_LT_GT {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_LT_GT";
            bindings = <&kp LESS_THAN>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_vim_d_dd_D: td_vim_d_dd_D {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_VIM_D_DD_D";
            #binding-cells = <0>;
            bindings = <&gr_vim_d_D>, <&mcr_vim_dd>;
        };

        gr_vim_d_D: gr_vim_d_D {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_D_D";
            bindings = <&kp DELETE>, <&mcr_vim_D>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_vim_y_yy_Y: td_vim_y_yy_Y {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_VIM_Y_YY_Y";
            #binding-cells = <0>;
            bindings = <&gr_vim_y_Y>, <&mcr_vim_yy>;

            tapping-term-ms = <330>;
        };

        gr_vim_y_Y: gr_vim_y_Y {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_Y_Y";
            bindings = <&kp LG(C)>, <&mcr_vim_Y>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_vim_arwdown_pgdown: gr_vim_arwdown_pgdown {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_ARWDOWN_PGDOWN";
            bindings = <&kp DOWN_ARROW>, <&kp PAGE_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        gr_vim_arwup_pgup: gr_vim_arwup_pgup {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_ARWUP_PGUP";
            bindings = <&kp UP_ARROW>, <&kp PAGE_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        gr_vim_arwleft_linestart: gr_vim_arwleft_linestart {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_ARWLEFT_LINESTART";
            bindings = <&kp LEFT_ARROW>, <&kp LG(LEFT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        gr_vim_arwright_lineend: gr_vim_arwright_lineend {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_ARWRIGHT_LINEEND";
            bindings = <&kp RIGHT_ARROW>, <&kp LG(RIGHT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        skl: sticky_key_long_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_LONG_RELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            ignore-modifiers;
            quick-release;
        };

        td_quote_dquote: td_quote_dquote {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QUOTE_DQUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q         &kp W            &kp E                &kp R        &kp T                   &kp Y                 &kp U            &kp I                    &kp O              &kp P                 &none
&none  &hrm LCTRL A  &kp S            &kp D                &kp F        &lt 3 G                 &lt 3 H               &kp J            &kp K                    &kp L              &hrm LCTRL SEMICOLON  &none
&none  &hrm LSHFT Z  &hrm LEFT_ALT X  &hrm LEFT_CONTROL C  &hrm LGUI V  &hrm LA(LS(LCTRL)) B    &hrm LA(LS(LCTRL)) N  &hrm LEFT_GUI M  &hrm LEFT_CONTROL COMMA  &hrm LEFT_ALT DOT  &hrm LSHFT SLASH      &none
                                      &sk LEFT_GUI         &lt 1 TAB    &mt LSHIFT SPACE        &mt LSHIFT ENTER      &lt 2 BACKSPACE  &lt 1 DELETE
            >;
        };

        num_nav_layer {
            bindings = <
&none   &kp ASTERISK  &kp N7  &kp N8  &kp N9  &td_slshs    &kp TILDE         &kp GRAVE    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &mcr_arr_fn      &none
&trans  &kp PLUS      &kp N4  &kp N5  &kp N6  &kp N0       &kp CARET         &kp ASTRK    &kp HASH          &kp DOLLAR         &kp COLON        &trans
&none   &kp MINUS     &kp N1  &kp N2  &kp N3  &kp EQUAL    &kp BACKSPACE     &kp PERCENT  &kp AT_SIGN       &kp AMPS           &kp EXCLAMATION  &none
                              &trans  &trans  &kp DOT      &mcr_comma_space  &trans       &trans
            >;
        };

        vim_layer {
            bindings = <
&none  &none             &mcr_next_word  &kp LA(RIGHT_ARROW)  &none           &none           &td_vim_y_yy_Y             &kp LG(Z)               &to 0               &mcr_new_line_down        &kp LG(V)  &none
&none  &kp LEFT_CONTROL  &kp LG(F)       &td_vim_d_dd_D       &none           &gr_vim_ggG     &gr_vim_arwleft_linestart  &gr_vim_arwdown_pgdown  &gr_vim_arwup_pgup  &gr_vim_arwright_lineend  &kp LCTRL  &none
&none  &kp LEFT_SHIFT    &kp BACKSPACE   &kp LG(X)            &kt LEFT_SHIFT  &kp LA(LEFT)    &none                      &kp LG(X)               &none               &none                     &kp LG(F)  &none
                                         &trans               &trans          &trans          &trans                     &trans                  &trans
            >;
        };

        hotkeys_layer {
            bindings = <
&trans  &kp LG(N1)      &kp LG(N2)      &kp LG(N3)      &kp LG(N4)      &kp LG(N5)        &kp LG(N6)  &kp LG(N7)     &kp LG(N8)     &kp LG(N9)  &kp LG(N0)  &trans
&trans  &kp LG(A)       &kp LG(X)       &kp LG(C)       &kp LG(V)       &none             &none       &kp LG(LC(J))  &kp LG(LC(K))  &none       &none       &trans
&trans  &kp LG(LS(N1))  &kp LG(LS(N2))  &kp LS(LG(N3))  &kp LG(LS(N4))  &kp LS(LG(N5))    &trans      &trans         &trans         &trans      &trans      &trans
                                        &none           &trans          &mcr_paste_app    &trans      &trans         &trans
            >;
        };

        bt_layer {
            bindings = <
&none  &bt BT_CLR_ALL  &bt BT_DISC 4  &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1          &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &bt BT_CLR_ALL  &none
&none  &sys_reset      &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1           &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &sys_reset      &none
&none  &mcr_test       &bt BT_PRV     &bt BT_CLR     &bt BT_NXT     &mcr_flash_firmware    &bootloader    &bt BT_PRV     &bt BT_CLR     &bt BT_NXT     &mcr_test       &none
                                      &trans         &trans         &trans                 &trans         &trans         &trans
            >;
        };

        game_layer {
            bindings = <
&trans  &trans  &trans  &trans    &trans     &trans       &kp TILDE       &trans          &trans        &trans           &kp ESC  &trans
&trans  &trans  &trans  &trans    &trans     &trans       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans   &trans
&trans  &trans  &trans  &trans    &trans     &trans       &trans          &trans          &trans        &trans           &trans   &trans
                        &kp LGUI  &kp LSHFT  &kp SPACE    &trans          &trans          &trans
            >;
        };

        paste_app_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &mcr_paste_1          &mcr_paste_2    &mcr_paste_3     &mcr_paste_4           &mcr_paste_5  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LG(LEFT_BRACKET)  &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp LG(RIGHT_BRACKET)  &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans                &trans          &trans           &trans                 &trans        &trans
                        &trans  &trans  &trans    &mcr_enter            &trans          &trans
            >;
        };

        media_func_layer {
            bindings = <
&none  &none  &kp F9  &kp F10  &kp F11  &kp F12    &mcr_f9  &mcr_f10  &mcr_f11  &mcr_f12  &none  &none
&none  &none  &kp F5  &kp F6   &kp F7   &kp F8     &mcr_f5  &mcr_f6   &mcr_f7   &mcr_f8   &none  &none
&none  &none  &kp F1  &kp F2   &kp F3   &kp F4     &mcr_f1  &mcr_f2   &mcr_f3   &mcr_f4   &none  &none
                      &trans   &trans   &trans     &trans   &trans    &trans
            >;
        };
    };
};
