/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NUM 1
#define ARR 2
#define HK 3
#define ADJ 4

&mt {
    flavor = "balanced";
};

/ {
    macros {
        ZMK_MACRO(colon,

        wait-ms = <30>;
        tap-ms = <40>;
        bindings =
            <&macro_press>,
            <&kp LALT>,
            <&macro_tap>,
            <&kp KP_N5 &kp KP_N8>,
            <&macro_release>,
            <&kp LALT>;

        )
    };

    combos {
        /*                KEY POSITIONS OLD
            ╭────────────────────────╮ ╭────────────────────────╮
         ╭──╯  1   2   3   4   5   6 │ │  7   8   9  10  11  12 ╰──╮
         │ 0  14  15  16  17  18  19 │ │ 20  21  22  23  24  25  13│
         ╰──╮ 26  27  28  29  30  31 │ │ 32  33  34  35  36  37 ╭──╯
            ╰───────────╮ 38  39  40 │ │ 41  42  43 ╭───────────╯
                        ╰────────────╯ ╰────────────╯               */
        /*                KEY POSITIONS NEW
            ╭────────────────────────╮ ╭────────────────────────╮
            │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │ 
            │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
            │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │ 
            ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
                        ╰────────────╯ ╰────────────╯               */

        compatible = "zmk,combos";

        combo_capslock {
            timeout-ms = <50>;
            key-positions = <16 17 18 19>;
            bindings = <&kp CAPSLOCK>;
        };

        combo_esc_left {
            bindings = <&gresc>;
            key-positions = <28 27>;
            timeout-ms = <50>;
        };

        combo_esc_right {
            bindings = <&gresc>;
            key-positions = <31 32>;
            timeout-ms = <50>;
        };
    };

    behaviors {
        td0: td_ply_nxt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLY_NXT";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        td1: td_sls {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SLS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp FSLH>, <&kp BACKSLASH>;
        };

        td2: td_pls_ast {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLS_AST";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp KP_PLUS>, <&kp KP_ASTERISK>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;

            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        default_layer {
            // ╭─────┬─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────┬─────╮
            // │ GUI │ESC~ │  Q  │  W  │  E  │  R  │  T  │   │  Y  │  U  │  I  │  O  │  P  │  [  │  ]  │
            // ╰─────│ACTAB│GUI/A│ALT/S│SFT/D│CTR/F│  G  │   │  H  │CTR/J│SFT/K│ALT/L│GUI/;│  '  │─────╯
            //       |  -  │  Z  │  X  │  C  │  V  │  B  │   │  N  │  M  │  ,  │  .  │  /  │  \  │
            //       ╰───────────│HK/TAB│ARR/SPC│NUM/SPC│   │NUM/ENT│ARR/BKSP│HK/DEL│───────────╯
            //                   ╰───────────────────────╯   ╰───────────────────────╯

            bindings = <
&gresc            &kp Q        &kp W              &kp E                &kp R          &kp T        &kp Y              &kp U         &kp I                &kp O              &kp P           &kp LBKT
&kp LEFT_CONTROL  &hrm LALT A  &hrm LEFT_SHIFT S  &hrm LCTRL D         &hrm LGUI F    &kp G        &kp H              &hrm LGUI J   &hrm LEFT_CONTROL K  &hrm LEFT_SHIFT L  &hrm LALT SEMI  &kp SQT
&kp LEFT_SHIFT    &kp Z        &kp X              &kp C                &kp V          &kp B        &kp N              &kp M         &kp SLASH            &kp BACKSLASH      &none           &none
                                                  &lt HK LEFT_CONTROL  &lt ARR SPACE  &lt 5 TAB    &lt NUM LG(LC(N))  &lt 4 RETURN  &lt HK BACKSPACE
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        numbers_layer {
            // -----------------------------------------------------------------------------------------
            // |     |     |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |     |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |     |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    |TRANS|TRANS|TRANS|   |TRANS|TRANS|TRANS|

            bindings = <
&none      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp N8       &kp N9    &kp NUMBER_0  &none
&kp EQUAL  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT       &kp CARET     &kp AMPS      &kp STAR     &kp LPAR  &kp RPAR      &kp MINUS
&none      &kp F1        &kp F2        &kp F3        &kp F5        &kp F7          &kp F8        &kp F9        &kp F10      &kp F11   &kp F12       &none
                                       &trans        &trans        &trans          &trans        &trans        &kp LS(INS)
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        vim_layer {
            // -----------------------------------------------------------------------------------------
            // |     |      |  =  |  7  |  8  |  9  | -// |   | HOME| PGDN| PGUP| END |     | VOLU |     |
            //       |  ENT |  :  |  4  |  5  |  6  | +/* |   | LEFT| DOWN|  UP | RGHT|     | PLAY |
            //       | CALC |  .  |  1  |  2  |  3  |  0  |   |C+LEFT|C+PGDN|C+PGUP|C+RGHT| | VOLD |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&none  &none  &none  &none   &none   &td1      &kp HOME      &kp PG_DN      &kp PG_UP      &kp END        &none  &kp C_VOL_UP
&none  &none  &none  &none   &none   &td2      &kp LEFT      &kp DOWN       &kp UP         &kp RIGHT      &none  &td0
&none  &none  &none  &none   &none   &none     &kp LC(LEFT)  &kp LC(PG_DN)  &kp LC(PG_UP)  &kp LC(RIGHT)  &none  &kp C_VOL_DN
                     &trans  &trans  &trans    &trans        &trans         &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        hotkeys_layer {
            bindings = <
&kp LG(GRAVE)  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)    &kp LG(N6)  &kp LG(N7)     &kp LG(N8)     &kp LG(N9)  &kp LG(N0)  &trans
&trans         &kp LG(A)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &none         &trans      &kp LG(GRAVE)  &none          &none       &none       &trans
&trans         &none       &none       &none       &none       &none         &trans      &trans         &trans         &trans      &trans      &trans
                                       &none       &trans      &trans        &trans      &trans         &kp LG(GRAVE)
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR |
            // | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            // | RST  |     |     |     |     |     |   |     |     |     |     |     | RST  |
            //                          |     |     |   |     |     |     |     |

            bindings = <
&bootloader  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans          &trans        &none         &trans
            >;
        };

        chars_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp NUMBER_0  &kp STAR      &kp HASH    &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS     &kp KP_COMMA  &kp KP_DOT  &kp COLON  &kp EQUAL  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans      &trans     &trans     &trans
                        &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };
    };
};
