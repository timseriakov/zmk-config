/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "balanced"; };

/ {
    macros {
        mcr_arr_fn: macro_arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE &kp LEFT_BRACE &kp RET>;
            label = "MACRO_ARROW_FN";
        };

        mcr_dbl_shft: mcr_dbl_shft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LEFT_SHIFT &kp LEFT_SHIFT>;

            label = "MCR_DBL_SHFT";
        };

        mcr_tap_shft: mcr_tap_shft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LEFT_SHIFT>;

            label = "MCR_TAP_SHFT";
        };

        mcr_test: mcr_test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp LS(Q) &kp A &kp Z &kp N2 &kp LS(W) &kp S &kp X &kp ENTER>;
            label = "MCR_TEST";
        };

        mcr_comma_space: mcr_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MCR_COMMA_SPACE";
        };

        mcr_dot_space: mcr_dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE>;
            label = "MCR_DOT_SPACE";
        };

        mcr_new_line_down: mcr_new_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT_ARROW) &kp LS(ENTER)>;
            label = "MCR_NEW_LINE";
        };

        mcr_next_word: mcr_next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp RIGHT_ARROW>;
            label = "MCR_NEXT_WORD";
        };

        mcr_f5: mcr_f5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F5>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F5";
        };

        mcr_f6: mcr_f6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F24>,
                <&macro_tap>,
                <&kp F6>,
                <&macro_release>,
                <&kp F24>;

            label = "MCR_F6";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_fghj_capslock {
            timeout-ms = <100>;
            key-positions = <4 5 6 7>;
            bindings = <&kp CAPSLOCK>;
        };

        combo_df_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        combo_jk_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        combo_yu_play_pause {
            bindings = <&td_ply>;
            key-positions = <6 7>;
            timeout-ms = <75>;
        };

        combo_hj_enter {
            bindings = <&kp RETURN>;
            key-positions = <18 19>;
            timeout-ms = <75>;
        };

        combo_fg_tab {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
            timeout-ms = <75>;
        };

        combo_ui_volume_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <7 8>;
        };

        combo_io_volume_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <8 9>;
        };

        combo_qw_brightness_down {
            bindings = <&kp F1>;
            key-positions = <1 2>;
        };

        combo_we_brightness_up {
            bindings = <&kp F2>;
            key-positions = <2 3>;
        };

        combo_b_t1_raycast {
            bindings = <&kp LG(SPACE)>;
            key-positions = <29 38>;
        };

        combo_b_t2_raycast_apps {
            bindings = <&kp LG(LC(N))>;
            key-positions = <29 37>;
        };

        combo_n_t2_homerow_app {
            bindings = <&kp LG(LS(J))>;
            key-positions = <30 40>;
        };

        combo_n_t1_homerow_app {
            bindings = <&kp LC(LG(SPACE))>;
            key-positions = <30 39>;
        };

        combo_jm_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <19 31>;
            timeout-ms = <75>;
        };

        combo_k_comma_hash {
            bindings = <&kp HASH>;
            key-positions = <20 32>;
            timeout-ms = <75>;
        };

        combo_hm_percent {
            bindings = <&kp PERCENT>;
            key-positions = <18 30>;
        };

        combo_uj_brackets_round {
            bindings = <&td_bks_round>;
            key-positions = <7 19>;
            timeout-ms = <75>;
        };

        combo_ik_brackets_square {
            bindings = <&td_bks_square>;
            key-positions = <8 20>;
            timeout-ms = <75>;
        };

        combo_tg_quotes {
            bindings = <&kp APOSTROPHE>;
            key-positions = <5 17>;
        };

        combo_nm_backspace {
            bindings = <&kp DELETE>;
            key-positions = <30 31>;
            timeout-ms = <75>;
        };

        combo_vb_delete {
            bindings = <&kp BACKSPACE>;
            key-positions = <28 29>;
            timeout-ms = <75>;
        };

        combo_kl_equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 21>;
            timeout-ms = <75>;
        };

        combo_lt_gt_minus {
            bindings = <&kp MINUS>;
            key-positions = <32 33>;
            timeout-ms = <75>;
        };

        combo_t2_t2_toggle_vim_layer {
            bindings = <&tog 2>;
            key-positions = <37 40>;
            timeout-ms = <75>;
        };

        combo_uio_mute {
            bindings = <&kp K_MUTE>;
            key-positions = <7 8 9>;
        };

        combo_yh_brackets_curly {
            bindings = <&td_bks_curly>;
            key-positions = <6 18>;
            timeout-ms = <75>;
        };

        combo_t1_t1_dot_space {
            bindings = <&mcr_dot_space>;
            key-positions = <38 39>;
            timeout-ms = <75>;
        };

        combo_fj_comma_space {
            bindings = <&mcr_comma_space>;
            key-positions = <16 19>;
            timeout-ms = <75>;
        };

        combo_rf_lt_gt {
            bindings = <&td_LT_GT>;
            key-positions = <4 16>;
            timeout-ms = <75>;
        };

        combo_aq_ctrl_a {
            bindings = <&kp LC(A)>;
            key-positions = <13 1>;
            timeout-ms = <75>;
        };

        combo_v_t3_console {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <28 36>;
        };

        combo_m_t3_console {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <31 41>;
        };
    };

    behaviors {
        td_ply: td_ply {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLY";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp F8>, <&kp F9>, <&kp F7>;
        };

        td_slshs: td_slashes {
            compatible = "zmk,behavior-tap-dance";
            label = "td_slashes";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp FSLH>, <&kp BACKSLASH>;
        };

        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td_bks_round: td_bks_round {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BKS_ROUND";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&gr_bks_round>, <&kp RIGHT_PARENTHESIS>;
        };

        td_bks_square: td_bks_square {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BKS_SQUARE";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        td_bks_curly: td_bks_curly {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BKS_CURLY";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&gr_bks_curly>, <&kp RIGHT_BRACE>;
        };

        gr_bks_round: gr_bks_round {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_BKS_ROUND";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_bks_curly: gr_bks_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_BKS_CURLY";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_bt_clr: gr_bt_clr {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_BT_CLR";
            bindings = <&bt BT_CLR>, <&bt BT_CLR_ALL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_boot_reset: gr_boot_reset {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_BOOT_RESET";
            bindings = <&bootloader>, <&sys_reset>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gr_vim_ggG: gr_vim_ggG {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_VIM_GGG";
            bindings = <&td_g_gg>, <&kp LG(DOWN_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_g_gg: td_g_gg {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_G_GG";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp LG(UP_ARROW)>;

            tapping-term-ms = <260>;
        };

        td_LT_GT: td_LT_GT {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LT_GT";
            #binding-cells = <0>;
            tapping-term-ms = <260>;
            bindings = <&gr_LT_GT>, <&kp GT>;
        };

        gr_LT_GT: gr_LT_GT {
            compatible = "zmk,behavior-mod-morph";
            label = "GR_LT_GT";
            bindings = <&kp LESS_THAN>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        default_layer {
            bindings = <
&none  &kp Q         &kp W            &kp E         &kp R           &kp T          &kp Y        &kp U            &kp I                    &kp O              &kp P                 &none
&none  &hrm LCTRL A  &kp S            &kp D         &kp F           &lt 3 G        &lt 3 H      &kp J            &kp K                    &kp L              &hrm LCTRL SEMICOLON  &none
&none  &hrm LSHFT Z  &hrm LEFT_ALT X  &kp C         &kp V           &kp B          &kp N        &hrm LEFT_GUI M  &hrm LEFT_CONTROL COMMA  &hrm LEFT_ALT DOT  &td_slshs             &none
                                      &sk LEFT_GUI  &sk LEFT_SHIFT  &lt 1 SPACE    &lt 1 ENTER  &lt 2 BACKSPACE  &lt 4 DELETE
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        numbers_layer {
            bindings = <
&none   &kp N5     &kp N6        &kp N7        &kp N8    &kp N9       &kp TILDE      &mcr_tap_shft  &mcr_dbl_shft  &mcr_arr_fn  &none            &none
&trans  &kp N1     &kp NUMBER_2  &kp NUMBER_3  &kp N4    &kp N0       &kp CARET      &kp ASTRK      &kp HASH       &kp DOLLAR   &kp COLON        &trans
&none   &kp SLASH  &kp ASTERISK  &kp MINUS     &kp PLUS  &kp EQUAL    &kp BACKSPACE  &kp PERCENT    &kp AT_SIGN    &kp AMPS     &kp EXCLAMATION  &none
                                 &trans        &trans    &kp DOT      &kp DOT        &trans         &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        vim_layer {
            bindings = <
&none  &none          &mcr_next_word  &kp LA(RIGHT_ARROW)  &none           &none           &kp LG(C)  &kp LG(Z)  &kp LG(LEFT_ARROW)  &mcr_new_line_down  &kp LG(V)  &none
&none  &kp LG(RIGHT)  &none           &kp BACKSPACE        &none           &gr_vim_ggG     &kp LEFT   &kp DOWN   &kp UP              &kp RIGHT           &none      &none
&none  &none          &kp DELETE      &kp LG(X)            &kt LEFT_SHIFT  &kp LA(LEFT)    &none      &kp LG(X)  &none               &none               &kp LG(F)  &none
                                      &trans               &trans          &trans          &trans     &trans     &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        hotkeys_layer {
            bindings = <
&trans  &kp LG(N1)      &kp LG(N2)      &kp LG(N3)      &kp LG(N4)      &kp LG(N5)        &kp LG(N6)  &kp LG(N7)     &kp LG(N8)     &kp LG(N9)  &kp LG(N0)  &trans
&trans  &kp LG(A)       &kp LG(X)       &kp LG(C)       &kp LG(V)       &kp LS(LG(V))     &none       &kp LG(LC(J))  &kp LG(LC(K))  &none       &none       &trans
&trans  &kp LG(LS(N1))  &kp LG(LS(N2))  &kp LS(LG(N3))  &kp LG(LS(N4))  &kp LS(LG(N5))    &trans      &trans         &trans         &trans      &trans      &trans
                                        &none           &trans          &kp LG(LS(V))     &trans      &trans         &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        adjust_layer {
            bindings = <
&none  &kp F5   &kp F6   &kp F7   &kp F8   &kp F9     &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none
&none  &kp F1   &kp F2   &kp F3   &kp F4   &kp F24    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
&none  &kp F10  &kp F11  &kp F12  &mcr_f5  &mcr_f6    &kp F24        &bt BT_PRV     &gr_bt_clr     &bt BT_NXT     &mcr_test      &none
                         &trans   &trans   &trans     &trans         &trans         &trans
            >;
        };
    };
};
